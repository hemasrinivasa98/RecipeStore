@model IEnumerable<RecipeStore.Models.RecipeModel>

@{
    ViewBag.Title = "Recipes";
}

<h2>Recipes</h2>

<p>
    <button class="btn btn-success white-text">@Html.ActionLink("Create New", "Create")</button>
    <!-- Trigger modal for recipe from URL -->
    <button type="button" class="btn btn-info" data-toggle="modal" data-target="#createFromURL">Recipe from URL</button>
</p>


<!-- Modal -->
<div id="createFromURL" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add new recipe from URL</h4>
            </div>
     <div class="modal-body">
             <div>
                 <button class="btn btn-info" data-toggle="collapse" data-target="#anabel-lang">Anabel Langbein</button>
                 <button class="btn btn-info" data-toggle="collapse" data-target="#nadia-lim">Nadia Lim</button>
                 
                 <hr />
                 <br />
             </div>

      <!-- Anabel Langbein -->
      <div id="anabel-lang" class="collapse">
            @using (
            @Html.BeginForm("CreateFromURL", "RecipeModels"))
            {

                <div>
                    @{
                        var categories = RecipeStore.Controllers.RecipeCategoriesController.GetDropDownItems();
                        <p>Please enter a URL: @Html.TextBox("URL", null, new { @class = "form-control" })</p>
                            <p>Pick a Category: @Html.DropDownList("Category", RecipeStore.Controllers.RecipeCategoriesController.GetDropDownItems(), new { @class = "form-control" })</p>
                            <p>Please enter a Description: @Html.TextArea("Description", new { @class = "form-control" })</p>
                            @Html.Hidden("SiteName", "Annabel");
                            
                    }
            
            
                </div>

                <div class="modal-footer">
                    <input type="submit" value="Submit" class="btn btn-default"/>
                </div>
             }
      </div>
            <!-- End of Anabel -->

         <!-- Nadia -->
         <div id="nadia-lim" class="collapse">
             @using (
           @Html.BeginForm("CreateFromURL", "RecipeModels"))
             {

                 <div>
                     @{
                         var categories = RecipeStore.Controllers.RecipeCategoriesController.GetDropDownItems();
                         <p>Please enter a URL: @Html.TextBox("URL", null, new { @class = "form-control" })</p>
                         <p>Pick a Category: @Html.DropDownList("Category", RecipeStore.Controllers.RecipeCategoriesController.GetDropDownItems(), new { @class = "form-control" })</p>
                         <p>Please enter a Description: @Html.TextArea("Description", new { @class = "form-control" })</p>
                         @Html.Hidden("SiteName", "Nadia");

                     }


                 </div>

                 <div class="modal-footer">
                     <input type="submit" value="Submit" class="btn btn-default" />
                 </div>
                         }
         </div>
         <!-- End of Nadia -->
      </div>
        </div>
                
    </div>
</div>
<!-- End of URL modal -->

<div class="row">
    @foreach (var item in Model)
    {

        <div class="thumbnail col-sm-6 col-md-4">
            <img src="" alt="">
            <div class="caption">
                <h4><strong>@Html.DisplayFor(modelItem => item.RecipeName)</strong> <small>@Html.DisplayFor(modelItem => item.Category.CategoryName)</small></h4>
                <p> 
                @{
                    //Below checks for the length of the description
                    //if it is over a certain length then it removes the last 3 elements and appends '...'
                    //ToString declarations are just to enforce string behaviour and remove oddities

                    if(item.Description.ToString().Length > 51)
                    {
                        string appendDots = "...";
                        string newValue = item.Description.ToString();
                        newValue = newValue.Substring(0, 51);
                        newValue += appendDots.ToString();
                        item.Description = newValue.ToString();
                    }
                }

                @Html.DisplayFor(modelItem => item.Description) </p>
                <p>@Html.ActionLink("View", "Details", new { id = item.Id })</p>
            </div>
        </div>
    }
</div>